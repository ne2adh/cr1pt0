{"version":3,"sources":["SimetricoForm.js","ASimetricoForm.js","App.js","reportWebVitals.js","index.js"],"names":["crypto","require","algorithm","SECRET_KEY","ENCRYPTION_KEY","SimetricoForm","props","state","clave_secreta","texto","texto_encriptado","texto_descifrado","handleChangeClaveSecreta","bind","handleChangeTexto","handleSubmit","event","this","setState","target","value","length","Buffer","from","toString","a","text","iv","randomBytes","cipher","createCipheriv","encrypted","update","concat","final","encrypt","b","textParts","split","shift","encryptedText","join","decipher","createDecipheriv","decrypted","decrypt","console","log","alert","preventDefault","onSubmit","style","display","flexDirection","alignItems","padding","type","onChange","width","marginLeft","fontSize","rows","cols","color","React","Component","ASimetricoForm","clave_publica","clave_privada","public_key","buffer_enc","enc","publicEncrypt","private_key","buffer","des","privateDecrypt","key","passphrase","constants","RSA_NO_PADDING","ImportFromFileBodyPublicComponent","fileReader","handleFileRead","e","content","result","id","accept","file","files","FileReader","onloadend","readAsText","ImportFromFileBodyPrivateComponent","marginBottom","textAlign","readOnly","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe269169.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n /* ALGORITMO EXTRAIDO DE:  https://github.com/zishon89us/node-cheat.git */\r\nconst crypto = require('crypto');\r\nconst algorithm = 'aes-256-cbc';\r\nlet SECRET_KEY = '';\r\nlet ENCRYPTION_KEY = '';\r\nconst IV_LENGTH = 16;\r\n\r\nfunction encrypt(text) {\r\n    let iv = crypto.randomBytes(IV_LENGTH);\r\n    let cipher = crypto.createCipheriv(algorithm, Buffer.from(ENCRYPTION_KEY, 'hex'), iv);\r\n    let encrypted = cipher.update(text);\r\n    encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n    return iv.toString('hex') + ':' + encrypted.toString('hex');\r\n}\r\n  \r\nfunction decrypt(text) {\r\n    let textParts = text.split(':');\r\n    let iv = Buffer.from(textParts.shift(), 'hex');\r\n    let encryptedText = Buffer.from(textParts.join(':'), 'hex');\r\n    let decipher = crypto.createDecipheriv(algorithm, Buffer.from(ENCRYPTION_KEY, 'hex'), iv);\r\n    let decrypted = decipher.update(encryptedText);\r\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n    return decrypted.toString();\r\n}\r\n\r\nclass SimetricoForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          clave_secreta: 'EJEMPLO DE CIFRADO SIMETRICO AES',\r\n          texto: 'HOLA MUNDO',\r\n          texto_encriptado: '',\r\n          texto_descifrado: '',\r\n        };\r\n  \r\n      this.handleChangeClaveSecreta = this.handleChangeClaveSecreta.bind(this);\r\n      this.handleChangeTexto = this.handleChangeTexto.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n    handleChangeClaveSecreta(event) {\r\n      this.setState({clave_secreta: event.target.value});\r\n    }\r\n\r\n    handleChangeTexto(event) {\r\n      this.setState({texto: event.target.value});\r\n    }\r\n  \r\n    handleSubmit(event) {        \r\n        if((this.state.clave_secreta.length === 32) && this.state.texto.length > 1){\r\n            SECRET_KEY = Buffer.from(this.state.clave_secreta).toString('base64');\r\n            ENCRYPTION_KEY = Buffer.from(SECRET_KEY, 'base64');\r\n            let a = encrypt(this.state.texto);\r\n            let b = decrypt(a);\r\n            this.setState({ texto_encriptado: a, texto_descifrado: b});\r\n            console.log(a, b);     \r\n        }\r\n        else\r\n            alert('la palabra clave: ' + this.state.clave_secreta + ' debe tener, 32 caracteres, \\n y debe introducir un texto. ');\r\n        \r\n      event.preventDefault();\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div style={{display: 'inline-block'}}>\r\n            <h1>CIFRADO / DESCIFRADO</h1>\r\n            <h4>Por el algoritmo AES (cifrado asimetrico)</h4>\r\n            <div style={{display: 'flex', flexDirection: 'column', alignItems:'flex-start'}}>\r\n                <div style={{padding: '8px' }}>\r\n                    <label>\r\n                        Palabra Clave:\r\n                        <input type=\"text\" value={this.state.clave_secreta} onChange={this.handleChangeClaveSecreta} style={{width: '280px', marginLeft: '8px'}} />\r\n                        <span style={{fontSize: '10px'}}> ( 256 bits, 32 caracteres)</span>\r\n                    </label>\r\n                </div>\r\n                <div style={{padding: '8px' }}>\r\n                    <label>\r\n                        Texto a cifrar:\r\n                        <textarea value={this.state.texto} onChange={this.handleChangeTexto} rows={5} cols={80} style={{marginLeft: '8px'}}/>\r\n                    </label>\r\n                    <br  />\r\n                    <span>\r\n                      Texto cifrado:<pre>{`${this.state.texto_encriptado} `}</pre>                      \r\n                    </span>\r\n                    <span>\r\n                    Texto descifrado:\r\n                        <pre style={{color: 'red'}}>{`${this.state.texto_descifrado} `}</pre>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <hr />\r\n            <input type=\"submit\" value=\"Generar\" />\r\n            </div>\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default SimetricoForm;","import React from 'react';\r\n\r\n /* ALGORITMO EXTRAIDO DE:  */\r\nconst crypto = require('crypto');\r\n/* const path = require('path')\r\nconst fs = require('fs')\r\n\r\nconst encrypt = (text, pkPath) => {\r\n  return new Promise((resolve, reject) => {\r\n    const absPkPath = path.resolve(pkPath)\r\n    fs.readFile(absPkPath, 'utf8', (err, pk) => {\r\n      if (err) {\r\n        return reject(err)\r\n      }\r\n\r\n      const buffer = Buffer.from(text, 'utf8')\r\n      const encrypted = crypto.publicEncrypt(pk, buffer)\r\n      resolve(encrypted.toString('base64'))\r\n    })\r\n  })\r\n}\r\n\r\nconst decrypt = (text, privateKeyPath, passphrase) => {\r\n  return new Promise((resolve, reject) => {\r\n    const p = path.resolve(privateKeyPath)\r\n    fs.readFile(p, 'utf8', (err, pk) => {\r\n      if (err) {\r\n        return reject(err)\r\n      }\r\n\r\n      const buffer = Buffer.from(text, 'base64')\r\n      const decrypted = crypto.privateDecrypt({\r\n        key: pk.toString(),\r\n        passphrase\r\n      }, buffer)\r\n\r\n      resolve(decrypted.toString('utf8'))\r\n    })\r\n  })\r\n} */\r\n\r\n\r\nclass ASimetricoForm extends React.Component {\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          texto: 'HOLA MUNDO',\r\n          texto_encriptado: '',\r\n          texto_descifrado: '',\r\n          clave_publica: '',\r\n          clave_privada: '',\r\n        };\r\n  \r\n      this.handleChangeClaveSecreta = this.handleChangeClaveSecreta.bind(this);\r\n      this.handleChangeTexto = this.handleChangeTexto.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n    handleChangeClaveSecreta(event) {\r\n      this.setState({clave_secreta: event.target.value});\r\n    }\r\n\r\n    handleChangeTexto(event) {\r\n      this.setState({texto: event.target.value});\r\n    }\r\n  \r\n    handleSubmit(event) { \r\n      event.preventDefault();       \r\n        if((this.state.clave_publica.length > 0 ) && (this.state.clave_privada.length > 0 ) && (this.state.texto.length > 1)){         \r\n            /* encrypt */\r\n            const public_key = this.state.clave_publica;\r\n            const buffer_enc = Buffer.from(this.state.texto, 'utf8');\r\n             const encrypted = crypto.publicEncrypt(public_key, buffer_enc);            \r\n            const enc = encrypted.toString('base64');\r\n            this.setState({texto_encriptado: enc});\r\n          /* decrypt */\r\n            const private_key = this.state.clave_privada;\r\n            const buffer = Buffer.from(this.state.texto_encriptado, 'base64');\r\n            const decrypted = crypto.privateDecrypt({\r\n              key: private_key.toString(),\r\n              passphrase: '',\r\n              padding:crypto.constants.RSA_NO_PADDING\r\n            }, buffer);\r\n            const des = decrypted.toString('utf8');\r\n            this.setState({texto_descifrado: des});\r\n        }\r\n        else\r\n            alert('Se debe cargar tando la clave publica y privada (para los fines didacticos) \\n y debe introducir un texto. ');\r\n        \r\n      \r\n    }\r\n  \r\n    render() {\r\n      const ImportFromFileBodyPublicComponent = () => {\r\n        let fileReader;\r\n      \r\n        const handleFileRead = (e) => {\r\n            const content = fileReader.result;\r\n            this.setState({clave_publica: content});\r\n        };\r\n      \r\n        const handleFileChosen = (file) => {\r\n            fileReader = new FileReader();\r\n            fileReader.onloadend = handleFileRead;\r\n            fileReader.readAsText(file);\r\n        };\r\n      \r\n        return <div >\r\n                  <input type='file'\r\n                        id='file'\r\n                        accept='.pem'\r\n                        onChange={e => handleFileChosen(e.target.files[0])}\r\n                  />\r\n              </div>;\r\n      };\r\n      const ImportFromFileBodyPrivateComponent = () => {\r\n        let fileReader;\r\n      \r\n        const handleFileRead = (e) => {\r\n            const content = fileReader.result;\r\n            this.setState({clave_privada: content});\r\n        };\r\n      \r\n        const handleFileChosen = (file) => {\r\n            fileReader = new FileReader();\r\n            fileReader.onloadend = handleFileRead;\r\n            fileReader.readAsText(file);\r\n        };\r\n      \r\n        return <div >\r\n                  <input type='file'\r\n                        id='file'\r\n                        onChange={e => handleFileChosen(e.target.files[0])}\r\n                  />\r\n              </div>;\r\n      };\r\n\r\n      \r\n      return (\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div style={{display: 'inline-block'}}>\r\n            <h1>CIFRADO / DESCIFRADO</h1>\r\n            <h4>Por el algoritmo RSA (cifrado asimetrico)</h4>\r\n            <div style={{display: 'flex', flexDirection: 'column', alignItems:'flex-start'}}>\r\n                <div style={{padding: '8px', display: 'flex', flexDirection: 'column' }}>\r\n                    <div style={{marginBottom: '8px', textAlign: 'left'}}>\r\n                      <label>\r\n                          Clave publica:\r\n                      </label>\r\n                      <ImportFromFileBodyPublicComponent />\r\n                    </div>\r\n                    <div style={{width: '100px'}}>\r\n                      <textarea value={this.state.clave_publica} rows={8} cols={80} readOnly/>\r\n                    </div>\r\n                </div>                \r\n                <div style={{padding: '8px', display: 'flex', flexDirection: 'column' }}>\r\n                    <div style={{marginBottom: '8px', textAlign: 'left'}}>\r\n                      <label>\r\n                          Clave privada:\r\n                      </label>\r\n                      <ImportFromFileBodyPrivateComponent />\r\n                    </div>\r\n                    <div style={{width: '100px'}}>\r\n                      <textarea value={this.state.clave_privada} rows={8} cols={80} readOnly/>\r\n                    </div>\r\n                </div>                \r\n                <input type=\"submit\" value=\"Generar\" />\r\n                <div style={{padding: '8px' }}>\r\n                  <label>\r\n                      Texto a cifrar:\r\n                      <textarea value={this.state.texto} onChange={this.handleChangeTexto} rows={5} cols={80} style={{marginLeft: '8px'}}/>\r\n                  </label>\r\n                </div>\r\n                <div style={{padding: '8px', textAlign: 'left' }}>\r\n                    <span>\r\n                      Texto cifrado:\r\n                      <textarea value={this.state.texto_encriptado} rows={8} cols={80} readOnly/>\r\n                    </span><br />                              \r\n                    <span>\r\n                    Texto descifrado:\r\n                        <textarea style={{color: 'red'}} value={this.state.texto_descifrado} rows={8} cols={80} readOnly/>\r\n                    </span>\r\n                </div>\r\n            </div>            \r\n            </div>\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default ASimetricoForm;","import './App.css';\nimport SimetricoForm from './SimetricoForm';\nimport ASimetricoForm from './ASimetricoForm';\n\nfunction App() {\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">        \n        <p>\n         Aplicacion realizada por Giancarlo Delgadillo Coca <span style={{fontSize: '14px', color: 'aqua'}}> (giancarlodcwork@gmail.com) </span>\n        </p>       \n      </header>\n      <SimetricoForm />\n      <ASimetricoForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}